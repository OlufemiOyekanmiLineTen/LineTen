trigger:
  branches:
    include:
      - main
  paths:
    include:
      - LineTen/*

resources:
  repositories:
    - repository: pipeline-templates
      type: git
      name: pipeline-templates

variables:
  - group: global-secrets
  - name: DockerFileDirectory
    value: $(Build.Repository.LocalPath)/$(Build.Repository.Name)/LineTen
  - name: vmImage
    value: ubuntu-latest
  - name: AppName
    value: LineTen-weatherforecast
  - name: SolutionFileDirectory
    value: $(Build.Repository.LocalPath)/$(Build.Repository.Name)
  - name: SolutionFile
    value: Subscription.Api.sln
  - name: ApplicationDirectory
    value: $(Build.Repository.LocalPath)/$(Build.Repository.Name)/LineTen
  - name: ApplicationProjectFile
    value: src/Subscription.Api/Subscription.Api.csproj
  - name: EphemeralPlatform
    value: dev-ent

stages:
  - stage: build
    displayName: build/pullrequests
    jobs:
      - job: build
        timeoutInMinutes: 90
        pool:
          vmImage: $(VmImage)
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            demands: PRAgent
          ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
            demands: DeploymentAgent
        steps:
          - template: pipelines/dotnet-build-v2.yml@pipeline-templates
            parameters:
              AppName: $(AppName)
              SolutionFileDirectory: $(SolutionFileDirectory)
              SolutionFile: $(SolutionFile)
              ApplicationDirectory: $(ApplicationDirectory)
              ApplicationProjectFile: $(ApplicationProjectFile)
              DotNetCoreSdkVersion: 6.0.x
          - template: pipelines/helm-build-chart-v2.yml@pipeline-templates
            parameters:
              AppName: $(AppName)
              DockerFileDirectory: $(DockerFileDirectory)
              DockerArgs: --build-arg PAT=$(System.AccessToken) --build-arg Configuration=$(Configuration)
              ScanDockerImage: false
              DockerBuildContext: $(SolutionFileDirectory)
              SdkBaseImage: 6.0-alpine
              AspNetBaseImage: 6.0-alpine
          - template: pipelines/deploy-environment.yml@pipeline-templates
            parameters:
              AppName: $(AppName)
              Environment: pr-ent
              EnvironmentType: dev-ent
              Namespace: thomas-pr-ent


  - stage: dev
    condition: and(eq(dependencies.build.result,'Succeeded'), or(and(eq(variables['Environment'], 'null'), eq(variables['Build.SourceBranch'], 'refs/heads/main')), eq(variables['Environment'], 'dev'))) # Only deploy to dev if main branch and if Environment is not set
    jobs:
      - deployment: dev
        timeoutInMinutes: 90
        pool:
          vmImage: $(VmImage)
          demands: DeploymentAgent
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - template: pipelines/initialise-environment.yml@pipeline-templates
                  parameters:
                    Environment: dev-ent
                    EnvironmentType: dev-ent
                - template: pipelines/enterprise/helm-deploy-chart.yml@pipeline-templates
                  parameters:
                    AppName: $(AppName)
                    Environment: dev-ent
                    EnvironmentType: dev-ent
                - template: pipelines/enterprise/finalise-environment.yml@pipeline-templates
                  parameters:
                    AppName: $(AppName)
