# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '5a092e3f-d2b4-46c7-89af-5dc2d0ed44ec'
  imageRepository: 'olufemioyekanmilinetenlineten'
  containerRegistry: 'linetenacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'linetenacr1673d84e-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
  - stage: Create infrastructure
    displayName: Create the Infrastructure
    jobs:
     - job: terraform_plan
       displayName: plan
       pool:
         vmImage: $(vmImageName)
       continueOnError: false
       steps:
        - task: TerraformInstaller@0
          displayName: Install Terraform 0.14.6
          inputs:
            terraformVersion: 0.14.6

        - task: TerraformCLI@0
          inputs:
            command: 'import'
            environmentServiceName: 'Azure subscription 1 (c5808d2a-9117-446f-bcb7-3d65993bbef2)'
            providerAzureRmSubscriptionId: 'c5808d2a-9117-446f-bcb7-3d65993bbef2'
            allowTelemetryCollection: true
        - task: CmdLine@2
          displayName: Terraform Validate
          inputs:
            script: terraform validate

        - task: TerraformCLI@0
          inputs:
            command: 'init'
            commandOptions: 'terraform init'
            backendType: 'azurerm'
            backendServiceArm: 'Azure subscription 1 (c5808d2a-9117-446f-bcb7-3d65993bbef2)'
            backendAzureRmSubscriptionId: 'c5808d2a-9117-446f-bcb7-3d65993bbef2'
            backendAzureRmResourceGroupName: 'lineten-rg'
            backendAzureRmStorageAccountName: 'linetendemostorage'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'lineten.tfstate'
            allowTelemetryCollection: true
        
        - task: TerraformCLI@0
          inputs:
            command: 'plan'
            providerAzureRmSubscriptionId: 'c5808d2a-9117-446f-bcb7-3d65993bbef2'
            allowTelemetryCollection: true
        - task: AzurePowerShell@4
          displayName: terraform plan
          inputs:
            azureSubscription: dev
            ScriptPath: $(System.DefaultWorkingDirectory)/plan.ps1
            ScriptArguments: -platform dev -location westeurope -primaryLocation westeurope -secondaryLocations @("northeurope") -planId $(Build.BuildId)
            azurePowerShellVersion: LatestVersion
            FailOnStandardError: true

  - stage: Build
    displayName: Build stage
    jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          command: buildAndPush
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)

      - upload: manifests
        artifact: manifests

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build

    jobs:
    - deployment: Deploy
      displayName: Deploy
      pool:
        vmImage: $(vmImageName)
      environment: 'OlufemiOyekanmiLineTenLineTen-1830.lineten'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: KubernetesManifest@0
              displayName: Create imagePullSecret
              inputs:
                action: createSecret
                secretName: $(imagePullSecret)
                dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: deploy
                manifests: |
                  $(Pipeline.Workspace)/manifests/deployment.yml
                  $(Pipeline.Workspace)/manifests/service.yml
                imagePullSecrets: |
                  $(imagePullSecret)
                containers: |
                  $(containerRegistry)/$(imageRepository):$(tag)

