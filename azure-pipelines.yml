trigger:
  branches:
    include:
      - main
  paths:
    include:
      - LineTen/*

# resources:
#   repositories:
#     - repository: pipeline-templates
#       type: git
#       name: pipeline-templates

variables:
  - name: DockerFileDirectory
    value: $(Build.Repository.LocalPath)/$(Build.Repository.Name)/LineTen
  - name: vmImage
    value: ubuntu-latest
  - name: AppName
    value: LineTen-weatherforecast
  - name: SolutionFileDirectory
    value: $(Build.Repository.LocalPath)/$(Build.Repository.Name)
  - name: SolutionFile
    value: LineTen.sln
  - name: ApplicationDirectory
    value: $(Build.Repository.LocalPath)/$(Build.Repository.Name)/LineTen
  - name: ApplicationProjectFile
    value: src/LineTen.Api.csproj


stages:
  - stage: build
    displayName: build/pullrequests
    jobs:
      - job: build
        timeoutInMinutes: 90
        pool:
          vmImage: $(VmImage)
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            demands: PRAgent
          ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
            demands: DeploymentAgent
        steps:
        - checkout: self
        - task: gitversion/setup@0
          enabled: true
          displayName: Install GitVersion
          inputs:
            versionSpec: '5.6.3'
        - task: gitversion/execute@0
          enabled: true
          displayName: 'Establish Version'
          inputs:
            versionSpec: '5.6.3'
            useConfigFile: true
            configFilePath: "${{ parameters.SolutionFileDirectory }}/GitVersion.yml"
            targetPath: '${{ parameters.SolutionFileDirectory }}'
        - task: UseDotNet@2
          displayName: get .net core sdk
          inputs:
            packageType: sdk
            version: ${{ parameters.DotNetCoreSdkVersion }}
            installationPath: $(Agent.ToolsDirectory)/dotnet
        - task: UseDotNet@2
          displayName: get .net core 3.1 sdk for sonarcloud
          condition: and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),eq(variables['Build.SourceBranch'], 'refs/heads/main'))))
          inputs:
            packageType: sdk
            version: 3.1.404
            installationPath: $(Agent.ToolsDirectory)/dotnet
        - task: DotNetCoreCLI@2
          displayName: restore solution nuget packages
          inputs:
            command: restore
            projects: ${{ parameters.SolutionFileDirectory }}/${{ parameters.SolutionFile }}
            feedsToUse: config
            nugetConfigPath: ${{ parameters.SolutionFileDirectory }}/nuget.config
            workingDirectory: ${{ parameters.SolutionFileDirectory }}
        - task: DotNetCoreCLI@2
          displayName: build project
          inputs:
            command: build
            projects: ${{ parameters.ApplicationDirectory }}/${{ parameters.ApplicationProjectFile }}
            arguments: ${{ parameters.BuildArgs }}
            workingDirectory: '${{ parameters.ApplicationDirectory }}'
            versioningScheme: byBuildNumber
        - task: DotNetCoreCLI@2
          displayName: run unit tests
          condition: and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),eq(variables['Build.SourceBranch'], 'refs/heads/main'))))
          inputs:
            command: test
            projects: |
              ${{ parameters.ApplicationDirectory }}/**/*.Tests.csproj
              ${{ parameters.ApplicationDirectory }}/**/*.UnitTests.csproj
            arguments: /p:CollectCoverage=true /p:Threshold=${{ parameters.UnitTestThreshold }} "/p:CoverletOutputFormat=\"cobertura,opencover\"" /p:CoverletOutput="$(Build.SourcesDirectory)/${{ parameters.AppName }}/.testresults/coverage/" /p:ExcludeByAttribute="Obsolete%2cGeneratedCodeAttribute" ${{ parameters.UnitTestArgs }}
            workingDirectory: '${{ parameters.SolutionFileDirectory }}'
        - task: PublishCodeCoverageResults@1
          condition: succeededOrFailed()
          displayName: publish code coverage
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: $(Build.SourcesDirectory)/${{ parameters.AppName }}/.testresults/coverage/coverage.cobertura.xml
            failIfCoverageEmpty: false
        - task: SonarCloudAnalyze@1
          displayName: sonarcloud analyse
          condition: and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),eq(variables['Build.SourceBranch'], 'refs/heads/main'))))
        - task: SonarCloudPublish@1
          displayName: sonarcloud publish
          condition: and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),eq(variables['Build.SourceBranch'], 'refs/heads/main'))))
          inputs:
            pollingTimeoutSec: '500'
