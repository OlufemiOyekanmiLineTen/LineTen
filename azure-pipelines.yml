# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '5a092e3f-d2b4-46c7-89af-5dc2d0ed44ec'
  imageRepository: 'olufemioyekanmilinetenlineten'
  containerRegistry: 'linetenacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'linetenacr1673d84e-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Create infrastructure
  displayName: Create the Infrastructure
  steps:
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Install Terraform 0.14.6
    inputs:
      terraformVersion: 0.14.6
  - task: CmdLine@2
    displayName: Terraform Init
    inputs:
      script: terraform init -backend-config="access_key=$(jtmsneusacesterraform001-key1)"
      workingDirectory: terraform
  - task: CmdLine@2
    displayName: Terraform Import
    inputs:
      script: |
        terraform import -input=false -var="spn-client-id=$(nstar-tenant-tf-spn-client-id)" -var="spn-client-secret=$(nstar-tenant-tf-spn-secret)" -var="spn-tenant-id=$(nstar-tenant-tf-spn-tenant-id)" azurerm_role_definition.network-readers-vwan-routes "/providers/Microsoft.Authorization/roleDefinitions/e661db04-4e55-3142-89f4-d3e273090ca2|/providers/Microsoft.Management/managementGroups/JT"
      workingDirectory: terraform
  - task: CmdLine@2
    displayName: Terraform Validate
    inputs:
      script: terraform validate
      workingDirectory: terraform
  - task: CmdLine@2
    displayName: Terraform Plan
    inputs:
      script: terraform plan -input=false -out=tfplan -var="spn-client-id=$(nstar-tenant-tf-spn-client-id)" -var="spn-client-secret=$(nstar-tenant-tf-spn-secret)" -var="spn-tenant-id=$(nstar-tenant-tf-spn-tenant-id)"
      workingDirectory: terraform

  - task: AzurePowerShell@4
    displayName: terraform plan
    inputs:
      azureSubscription: dev
      ScriptPath: $(System.DefaultWorkingDirectory)/plan.ps1
      ScriptArguments: -platform dev -location westeurope -primaryLocation westeurope -secondaryLocations @("northeurope") -planId $(Build.BuildId)
      azurePowerShellVersion: LatestVersion
      FailOnStandardError: true

  - task: CmdLine@2
    displayName: Terraform Apply
    inputs:
      script: terraform apply
      workingDirectory: terraform

- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'OlufemiOyekanmiLineTenLineTen-1830.lineten'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

