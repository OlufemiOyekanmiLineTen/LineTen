parameters:
    - name: AcrConnection
      default: globalthomasacrweu
      type: string
    - name: HelmVersion
      default: 3.3.0
      type: string
    - name: AppName
      type: string
    - name: DockerFileDirectory
      type: string
    - name: DockerArgs
      default: ''
      type: string
    - name: DockerBuildContext
      default: .
      type: string
    - name: ScanDockerImage
      default: true
      type: boolean
    - name: TrivyVersion
      default: 0.25.0
      type: string
    - name: HelmArgs
      default: ''
    - name: AcrPullRequestFolder
      default: pull-request
      type: string
    - name: AcrManualFolder
      default: manual
      type: string
    - name: AcrDefaultFolder
      default: pre-release
      type: string 
    - name: NodeBaseImage
      default: 16-alpine
      type: string 
    - name: NginxBaseImage
      default: 1.21.6-alpine
      type: string
    - name: AspNetBaseImage
      default: 5.0-alpine
      type: string 
    - name: SdkBaseImage
      default: 5.0-alpine
      type: string
    
  steps:
    - script: echo '##vso[task.setvariable variable=AcrFolder]${{ parameters.AcrDefaultFolder }}'
      displayName: "Set the Acr Folder"
    - script: echo '##vso[task.setvariable variable=AcrFolder]${{ parameters.AcrPullRequestFolder }}'
      displayName: "Set the Acr Folder to Pull Request"
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    - script: echo '##vso[task.setvariable variable=AcrFolder]${{ parameters.AcrManualFolder }}'
      displayName: "Set the Acr Folder to Manual Build"
      condition: and(succeeded(), and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.SourceBranch'], 'refs/heads/main')))
    - task: HelmInstaller@1
      displayName: install helm
      inputs:
        helmVersionToInstall: ${{ parameters.HelmVersion }}
    - script: |
        sudo apt-get install rpm
        wget https://github.com/aquasecurity/trivy/releases/download/v${{ parameters.TrivyVersion }}/trivy_${{ parameters.TrivyVersion }}_Linux-64bit.deb
        sudo dpkg -i trivy_${{ parameters.TrivyVersion }}_Linux-64bit.deb
        trivy -v
      displayName: 'download and install Trivy'
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    - task: Docker@2
      displayName: build and scan docker image
      inputs:
        command: build
        containerRegistry: ${{ parameters.AcrConnection }}
        repository: $(AcrFolder)/${{ parameters.AppName }}
        Dockerfile: ${{ parameters.DockerFileDirectory }}/Dockerfile
        buildContext: ${{ parameters.DockerBuildContext }}
        tags: $(Build.BuildId)
        arguments: ${{ parameters.DockerArgs }} --build-arg NodeVersion=${{ parameters.NodeBaseImage }} --build-arg NginxVersion=${{ parameters.NginxBaseImage }} --build-arg AspNetVersion=${{ parameters.AspNetBaseImage }} --build-arg SdkVersion=${{ parameters.SdkBaseImage }}
    - checkout: git://Thomas/pipeline-templates@main
    - task: PowerShell@2
      displayName: run trivy scan
      continueOnError: true
      condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
      inputs:
        filePath: $(Build.SourcesDirectory)/pipeline-templates/pipelines/scripts/post-pr-comment.ps1
        arguments: -appName ${{ parameters.AppName }} -acrFolder $(AcrFolder) -repositoryId $(Build.Repository.ID) -buildId $(Build.BuildId)
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    - task: Docker@2
      displayName: push docker image to container registry (pre-release)
      inputs:
        containerRegistry: ${{ parameters.AcrConnection }}
        repository: $(AcrFolder)/${{ parameters.AppName }}
        command: push
        buildContext:  ${{ parameters.DockerBuildContext }}
        tags: $(Build.BuildId)
    - bash: helm package --version $(Build.BuildId) --app-version $(Build.BuildId) --debug --destination $(Build.ArtifactStagingDirectory) ./${{ parameters.AppName }}
      workingDirectory: ${{ parameters.DockerFileDirectory }}/Helm
      displayName: package helm chart
    - bash: |
        az login --service-principal -u $(AcrServicePrincipalClientId) -p '$(AcrServicePrincipalClientSecret)' -t $(TenantId)
        az acr helm push -n $(AcrName) $(Build.ArtifactStagingDirectory)/${{ parameters.AppName }}-$(Build.BuildId).tgz --force --debug
      displayName: push helm chart to container registry